
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightQUESTIONCOLONleftORleftANDleftEQNEleftLTLEGTGEleftLSHIFTRSHIFTleftPLUSMINUSleftTIMESDIVIDEMODrightUNOTUMINUSAND ARROW ASSIGN BREAK CLASS COLON COMMA CONST CONTINUE CPP_BLOCK DIVIDE DOT ELIF ELSE EQ FALSE FATARROW FOR FUNC GE GT IDENTIFIER IF IN INTERP_STRING LBRACE LBRACKET LE LPAREN LSHIFT LT MINUS MOD NE NOT NUMBER OR PLUS PRIVATE PROTECTED PUBLIC QUESTION RAW_STRING RBRACE RBRACKET RETURN RPAREN RSHIFT SEMICOLON STATIC STRING TIMES TRUE TYPE WHILEprogram : statement_liststatement_list : statement_list statement\n| statement\n| emptystatement : function_decl\n| var_decl SEMICOLON\n| return_stmt\n| if_stmt\n| while_stmt\n| for_stmt\n| break_stmt\n| continue_stmt\n| expr_stmt\n| cpp_blockfunction_decl : FUNC IDENTIFIER LPAREN param_list RPAREN ARROW TYPE block\n| FUNC IDENTIFIER LPAREN param_list RPAREN block\n| FUNC TYPE LPAREN param_list RPAREN ARROW TYPE block\n| FUNC TYPE LPAREN param_list RPAREN blockparam_list : param_list COMMA param\n| param\n| emptyparam : CONST TYPE IDENTIFIER\n| CONST TYPE AND IDENTIFIER\n| TYPE IDENTIFIER\n| TYPE AND IDENTIFIERvar_decl : TYPE IDENTIFIER ASSIGN expression\n| TYPE IDENTIFIER\n| modifier_list TYPE IDENTIFIER ASSIGN expression\n| modifier_list TYPE IDENTIFIERmodifier_list : modifier_list modifier\n| modifiermodifier : CONST\n| STATIC\n| PRIVATE\n| PUBLIC\n| PROTECTEDreturn_stmt : RETURN expression SEMICOLON\n| RETURN SEMICOLONif_stmt : IF LPAREN expression RPAREN block elif_list else_clause\n| IF LPAREN expression RPAREN block elif_list\n| IF LPAREN expression RPAREN block else_clause\n| IF LPAREN expression RPAREN blockelif_list : elif_list elif_clause\n| elif_clauseelif_clause : ELIF LPAREN expression RPAREN blockelse_clause : ELSE blockwhile_stmt : WHILE LPAREN expression RPAREN blockfor_stmt : FOR LPAREN IDENTIFIER IN expression RPAREN blockbreak_stmt : BREAK SEMICOLONcontinue_stmt : CONTINUE SEMICOLONexpr_stmt : expression SEMICOLONblock : LBRACE statement_list RBRACEcpp_block : CPP_BLOCKexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MOD expression\n| expression EQ expression\n| expression NE expression\n| expression LT expression\n| expression LE expression\n| expression GT expression\n| expression GE expression\n| expression AND expression\n| expression OR expression\n| expression LSHIFT expression\n| expression RSHIFT expressionexpression : NOT expression %prec UNOT\n| MINUS expression %prec UMINUSexpression : expression QUESTION expression COLON expressionexpression : LPAREN expression RPARENexpression : IDENTIFIER LPAREN arg_list RPAREN\n| TYPE LPAREN arg_list RPARENarg_list : arg_list COMMA expression\n| expression\n| emptyexpression : NUMBER\n| STRING\n| RAW_STRING\n| INTERP_STRING\n| TRUE\n| FALSE\n| IDENTIFIERexpression : LBRACE expr_list RBRACEexpr_list : expr_list COMMA expression\n| expression\n| emptyempty :'
    
_lr_action_items = {'FUNC':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[15,15,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,15,-47,-16,-18,-40,-41,-44,15,-39,-43,-46,-52,-48,-15,-17,-45,]),'TYPE':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,17,20,21,27,28,29,30,37,38,39,40,41,42,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,73,74,76,77,83,84,89,108,113,118,121,124,125,128,131,139,140,141,143,144,149,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[18,18,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,46,49,69,49,-53,-31,49,49,49,-32,-33,-34,-35,-36,-2,-6,49,49,-51,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-30,-38,49,49,-49,-50,115,115,49,-37,49,134,49,49,49,49,115,-42,18,-47,158,-16,160,-18,-40,-41,-44,18,-39,-43,-46,49,-52,-48,-15,-17,-45,]),'RETURN':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[21,21,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,21,-47,-16,-18,-40,-41,-44,21,-39,-43,-46,-52,-48,-15,-17,-45,]),'IF':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[22,22,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,22,-47,-16,-18,-40,-41,-44,22,-39,-43,-46,-52,-48,-15,-17,-45,]),'WHILE':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[23,23,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,23,-47,-16,-18,-40,-41,-44,23,-39,-43,-46,-52,-48,-15,-17,-45,]),'FOR':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[24,24,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,24,-47,-16,-18,-40,-41,-44,24,-39,-43,-46,-52,-48,-15,-17,-45,]),'BREAK':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[25,25,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,25,-47,-16,-18,-40,-41,-44,25,-39,-43,-46,-52,-48,-15,-17,-45,]),'CONTINUE':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[26,26,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,26,-47,-16,-18,-40,-41,-44,26,-39,-43,-46,-52,-48,-15,-17,-45,]),'CPP_BLOCK':([0,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[27,27,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,27,-47,-16,-18,-40,-41,-44,27,-39,-43,-46,-52,-48,-15,-17,-45,]),'NOT':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[30,30,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,30,30,-53,30,30,30,-2,-6,30,30,-51,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-38,30,30,-49,-50,30,-37,30,30,30,30,30,-42,30,-47,-16,-18,-40,-41,-44,30,-39,-43,-46,30,-52,-48,-15,-17,-45,]),'MINUS':([0,2,3,4,5,7,8,9,10,11,12,13,14,16,17,19,21,27,29,30,31,32,33,34,35,36,37,43,44,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,76,77,78,79,81,86,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,110,112,113,120,121,122,123,124,125,128,129,136,137,138,139,140,141,142,144,150,151,152,153,156,161,162,163,164,165,166,167,168,169,171,],[29,29,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-84,29,54,29,-53,29,29,-78,-79,-80,-81,-82,-83,29,-2,-6,29,54,29,-51,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,54,-38,29,29,-49,-50,-70,-69,54,54,-72,29,-54,-55,-56,-57,-58,54,54,54,54,54,54,54,54,54,54,54,-37,54,54,-85,29,-73,29,54,-74,29,29,29,54,54,54,54,-42,29,-47,54,-16,-18,-40,-41,-44,29,-39,-43,-46,29,-52,-48,-15,-17,54,-45,]),'LPAREN':([0,2,3,4,5,7,8,9,10,11,12,13,14,16,17,18,21,22,23,24,27,29,30,37,43,44,45,46,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,155,156,161,162,163,164,165,166,167,168,171,],[17,17,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,47,17,51,17,73,74,75,-53,17,17,17,-2,-6,83,84,17,51,17,-51,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-38,17,17,-49,-50,17,-37,17,17,17,17,17,-42,17,-47,-16,-18,-40,-41,-44,164,17,-39,-43,-46,17,-52,-48,-15,-17,-45,]),'IDENTIFIER':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,17,18,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,89,108,113,115,121,124,125,128,133,134,139,140,141,144,148,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[16,16,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,45,16,50,16,-53,16,16,16,-2,-6,16,16,-51,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,107,-38,16,16,111,-49,-50,16,-37,16,132,16,16,16,16,146,147,-42,16,-47,-16,159,-18,-40,-41,-44,16,-39,-43,-46,16,-52,-48,-15,-17,-45,]),'NUMBER':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[31,31,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,31,31,-53,31,31,31,-2,-6,31,31,-51,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-38,31,31,-49,-50,31,-37,31,31,31,31,31,-42,31,-47,-16,-18,-40,-41,-44,31,-39,-43,-46,31,-52,-48,-15,-17,-45,]),'STRING':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[32,32,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,32,32,-53,32,32,32,-2,-6,32,32,-51,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-38,32,32,-49,-50,32,-37,32,32,32,32,32,-42,32,-47,-16,-18,-40,-41,-44,32,-39,-43,-46,32,-52,-48,-15,-17,-45,]),'RAW_STRING':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[33,33,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,33,33,-53,33,33,33,-2,-6,33,33,-51,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-38,33,33,-49,-50,33,-37,33,33,33,33,33,-42,33,-47,-16,-18,-40,-41,-44,33,-39,-43,-46,33,-52,-48,-15,-17,-45,]),'INTERP_STRING':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[34,34,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,34,34,-53,34,34,34,-2,-6,34,34,-51,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-38,34,34,-49,-50,34,-37,34,34,34,34,34,-42,34,-47,-16,-18,-40,-41,-44,34,-39,-43,-46,34,-52,-48,-15,-17,-45,]),'TRUE':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[35,35,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,35,35,-53,35,35,35,-2,-6,35,35,-51,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-38,35,35,-49,-50,35,-37,35,35,35,35,35,-42,35,-47,-16,-18,-40,-41,-44,35,-39,-43,-46,35,-52,-48,-15,-17,-45,]),'FALSE':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,128,139,140,141,144,150,151,152,153,156,161,162,163,164,165,166,167,168,171,],[36,36,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,36,36,-53,36,36,36,-2,-6,36,36,-51,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-38,36,36,-49,-50,36,-37,36,36,36,36,36,-42,36,-47,-16,-18,-40,-41,-44,36,-39,-43,-46,36,-52,-48,-15,-17,-45,]),'LBRACE':([0,2,3,4,5,7,8,9,10,11,12,13,14,17,21,27,29,30,37,43,44,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,76,77,89,108,113,121,124,125,126,127,128,130,135,139,140,141,144,150,151,152,153,154,156,157,158,160,161,162,163,164,165,166,167,168,170,171,],[37,37,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,37,37,-53,37,37,37,-2,-6,37,37,-51,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-38,37,37,-49,-50,37,-37,37,37,37,37,140,140,37,140,140,-42,37,-47,-16,-18,-40,-41,-44,140,37,140,140,140,-39,-43,-46,37,-52,-48,-15,-17,140,-45,]),'CONST':([0,2,3,4,5,7,8,9,10,11,12,13,14,20,27,28,38,39,40,41,42,43,44,52,70,72,76,77,83,84,108,131,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[38,38,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,38,-53,-31,-32,-33,-34,-35,-36,-2,-6,-51,-30,-38,-49,-50,118,118,-37,118,-42,38,-47,-16,-18,-40,-41,-44,38,-39,-43,-46,-52,-48,-15,-17,-45,]),'STATIC':([0,2,3,4,5,7,8,9,10,11,12,13,14,20,27,28,38,39,40,41,42,43,44,52,70,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[39,39,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,39,-53,-31,-32,-33,-34,-35,-36,-2,-6,-51,-30,-38,-49,-50,-37,-42,39,-47,-16,-18,-40,-41,-44,39,-39,-43,-46,-52,-48,-15,-17,-45,]),'PRIVATE':([0,2,3,4,5,7,8,9,10,11,12,13,14,20,27,28,38,39,40,41,42,43,44,52,70,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[40,40,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,40,-53,-31,-32,-33,-34,-35,-36,-2,-6,-51,-30,-38,-49,-50,-37,-42,40,-47,-16,-18,-40,-41,-44,40,-39,-43,-46,-52,-48,-15,-17,-45,]),'PUBLIC':([0,2,3,4,5,7,8,9,10,11,12,13,14,20,27,28,38,39,40,41,42,43,44,52,70,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[41,41,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,41,-53,-31,-32,-33,-34,-35,-36,-2,-6,-51,-30,-38,-49,-50,-37,-42,41,-47,-16,-18,-40,-41,-44,41,-39,-43,-46,-52,-48,-15,-17,-45,]),'PROTECTED':([0,2,3,4,5,7,8,9,10,11,12,13,14,20,27,28,38,39,40,41,42,43,44,52,70,72,76,77,108,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[42,42,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,42,-53,-31,-32,-33,-34,-35,-36,-2,-6,-51,-30,-38,-49,-50,-37,-42,42,-47,-16,-18,-40,-41,-44,42,-39,-43,-46,-52,-48,-15,-17,-45,]),'$end':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,27,43,44,52,72,76,77,108,139,141,144,150,151,152,153,161,162,163,165,166,167,168,171,],[-89,0,-1,-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-53,-2,-6,-51,-38,-49,-50,-37,-42,-47,-16,-18,-40,-41,-44,-39,-43,-46,-52,-48,-15,-17,-45,]),'RBRACE':([3,4,5,7,8,9,10,11,12,13,14,16,27,31,32,33,34,35,36,37,43,44,52,72,76,77,78,79,80,81,82,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,112,120,123,129,137,139,140,141,144,150,151,152,153,156,161,162,163,165,166,167,168,171,],[-3,-4,-5,-7,-8,-9,-10,-11,-12,-13,-14,-84,-53,-78,-79,-80,-81,-82,-83,-89,-2,-6,-51,-38,-49,-50,-70,-69,112,-87,-88,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-37,-85,-73,-74,-86,-71,-42,-89,-47,-16,-18,-40,-41,-44,165,-39,-43,-46,-52,-48,-15,-17,-45,]),'SEMICOLON':([6,16,19,21,25,26,31,32,33,34,35,36,50,71,78,79,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,120,122,123,137,138,],[44,-84,52,72,76,77,-78,-79,-80,-81,-82,-83,-27,108,-70,-69,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-29,-85,-73,-26,-74,-71,-28,]),'PLUS':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,53,-78,-79,-80,-81,-82,-83,53,53,-70,-69,53,53,-72,-54,-55,-56,-57,-58,53,53,53,53,53,53,53,53,53,53,53,53,53,-85,-73,53,-74,53,53,53,53,53,53,]),'TIMES':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,55,-78,-79,-80,-81,-82,-83,55,55,-70,-69,55,55,-72,55,55,-56,-57,-58,55,55,55,55,55,55,55,55,55,55,55,55,55,-85,-73,55,-74,55,55,55,55,55,55,]),'DIVIDE':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,56,-78,-79,-80,-81,-82,-83,56,56,-70,-69,56,56,-72,56,56,-56,-57,-58,56,56,56,56,56,56,56,56,56,56,56,56,56,-85,-73,56,-74,56,56,56,56,56,56,]),'MOD':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,57,-78,-79,-80,-81,-82,-83,57,57,-70,-69,57,57,-72,57,57,-56,-57,-58,57,57,57,57,57,57,57,57,57,57,57,57,57,-85,-73,57,-74,57,57,57,57,57,57,]),'EQ':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,58,-78,-79,-80,-81,-82,-83,58,58,-70,-69,58,58,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,58,58,-67,-68,58,58,58,-85,-73,58,-74,58,58,58,58,58,58,]),'NE':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,59,-78,-79,-80,-81,-82,-83,59,59,-70,-69,59,59,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,59,59,-67,-68,59,59,59,-85,-73,59,-74,59,59,59,59,59,59,]),'LT':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,60,-78,-79,-80,-81,-82,-83,60,60,-70,-69,60,60,-72,-54,-55,-56,-57,-58,60,60,-61,-62,-63,-64,60,60,-67,-68,60,60,60,-85,-73,60,-74,60,60,60,60,60,60,]),'LE':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,61,-78,-79,-80,-81,-82,-83,61,61,-70,-69,61,61,-72,-54,-55,-56,-57,-58,61,61,-61,-62,-63,-64,61,61,-67,-68,61,61,61,-85,-73,61,-74,61,61,61,61,61,61,]),'GT':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,62,-78,-79,-80,-81,-82,-83,62,62,-70,-69,62,62,-72,-54,-55,-56,-57,-58,62,62,-61,-62,-63,-64,62,62,-67,-68,62,62,62,-85,-73,62,-74,62,62,62,62,62,62,]),'GE':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,63,-78,-79,-80,-81,-82,-83,63,63,-70,-69,63,63,-72,-54,-55,-56,-57,-58,63,63,-61,-62,-63,-64,63,63,-67,-68,63,63,63,-85,-73,63,-74,63,63,63,63,63,63,]),'AND':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,115,120,122,123,129,134,136,137,138,142,169,],[-84,64,-78,-79,-80,-81,-82,-83,64,64,-70,-69,64,64,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,64,-67,-68,64,64,64,-85,133,-73,64,-74,64,148,64,64,64,64,64,]),'OR':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,65,-78,-79,-80,-81,-82,-83,65,65,-70,-69,65,65,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,65,65,65,-85,-73,65,-74,65,65,65,65,65,65,]),'LSHIFT':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,66,-78,-79,-80,-81,-82,-83,66,66,-70,-69,66,66,-72,-54,-55,-56,-57,-58,66,66,66,66,66,66,66,66,-67,-68,66,66,66,-85,-73,66,-74,66,66,66,66,66,66,]),'RSHIFT':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,67,-78,-79,-80,-81,-82,-83,67,67,-70,-69,67,67,-72,-54,-55,-56,-57,-58,67,67,67,67,67,67,67,67,-67,-68,67,67,67,-85,-73,67,-74,67,67,67,67,67,67,]),'QUESTION':([16,19,31,32,33,34,35,36,48,71,78,79,81,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,112,120,122,123,129,136,137,138,142,169,],[-84,68,-78,-79,-80,-81,-82,-83,68,68,-70,-69,68,68,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,68,68,68,-85,-73,68,-74,68,68,68,68,68,68,]),'RPAREN':([16,31,32,33,34,35,36,47,48,51,78,79,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,114,116,117,119,120,123,132,136,137,142,145,146,147,159,169,],[-84,-78,-79,-80,-81,-82,-83,-89,88,-89,-70,-69,-89,-89,120,-76,-77,-72,123,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,126,127,-85,130,-20,-21,135,-73,-74,-24,-75,-71,157,-19,-25,-22,-23,170,]),'COMMA':([16,31,32,33,34,35,36,37,47,51,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,114,116,117,119,120,123,129,132,136,137,145,146,147,159,],[-84,-78,-79,-80,-81,-82,-83,-89,-89,-89,-70,-69,113,-87,-88,-89,-89,121,-76,-77,-72,121,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-85,131,-20,-21,131,-73,-74,-86,-24,-75,-71,-19,-25,-22,-23,]),'COLON':([16,31,32,33,34,35,36,78,79,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,120,123,137,],[-84,-78,-79,-80,-81,-82,-83,-70,-69,-72,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,124,-85,-73,-74,-71,]),'ASSIGN':([50,107,],[89,125,]),'IN':([111,],[128,]),'ARROW':([130,135,],[143,149,]),'ELSE':([139,151,153,162,165,171,],[154,154,-44,-43,-52,-45,]),'ELIF':([139,151,153,162,165,171,],[155,155,-44,-43,-52,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,140,],[2,156,]),'statement':([0,2,140,156,],[3,43,3,43,]),'empty':([0,37,47,51,83,84,140,],[4,82,87,87,117,117,4,]),'function_decl':([0,2,140,156,],[5,5,5,5,]),'var_decl':([0,2,140,156,],[6,6,6,6,]),'return_stmt':([0,2,140,156,],[7,7,7,7,]),'if_stmt':([0,2,140,156,],[8,8,8,8,]),'while_stmt':([0,2,140,156,],[9,9,9,9,]),'for_stmt':([0,2,140,156,],[10,10,10,10,]),'break_stmt':([0,2,140,156,],[11,11,11,11,]),'continue_stmt':([0,2,140,156,],[12,12,12,12,]),'expr_stmt':([0,2,140,156,],[13,13,13,13,]),'cpp_block':([0,2,140,156,],[14,14,14,14,]),'expression':([0,2,17,21,29,30,37,47,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,74,89,113,121,124,125,128,140,156,164,],[19,19,48,71,78,79,81,86,86,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,122,129,136,137,138,142,19,19,169,]),'modifier_list':([0,2,140,156,],[20,20,20,20,]),'modifier':([0,2,20,140,156,],[28,28,70,28,28,]),'expr_list':([37,],[80,]),'arg_list':([47,51,],[85,90,]),'param_list':([83,84,],[114,119,]),'param':([83,84,131,],[116,116,145,]),'block':([126,127,130,135,154,157,158,160,170,],[139,141,144,150,163,166,167,168,171,]),'elif_list':([139,],[151,]),'else_clause':([139,151,],[152,161,]),'elif_clause':([139,151,],[153,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','test.py',179),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','test.py',183),
  ('statement_list -> statement','statement_list',1,'p_statement_list','test.py',184),
  ('statement_list -> empty','statement_list',1,'p_statement_list','test.py',185),
  ('statement -> function_decl','statement',1,'p_statement','test.py',195),
  ('statement -> var_decl SEMICOLON','statement',2,'p_statement','test.py',196),
  ('statement -> return_stmt','statement',1,'p_statement','test.py',197),
  ('statement -> if_stmt','statement',1,'p_statement','test.py',198),
  ('statement -> while_stmt','statement',1,'p_statement','test.py',199),
  ('statement -> for_stmt','statement',1,'p_statement','test.py',200),
  ('statement -> break_stmt','statement',1,'p_statement','test.py',201),
  ('statement -> continue_stmt','statement',1,'p_statement','test.py',202),
  ('statement -> expr_stmt','statement',1,'p_statement','test.py',203),
  ('statement -> cpp_block','statement',1,'p_statement','test.py',204),
  ('function_decl -> FUNC IDENTIFIER LPAREN param_list RPAREN ARROW TYPE block','function_decl',8,'p_function_decl','test.py',208),
  ('function_decl -> FUNC IDENTIFIER LPAREN param_list RPAREN block','function_decl',6,'p_function_decl','test.py',209),
  ('function_decl -> FUNC TYPE LPAREN param_list RPAREN ARROW TYPE block','function_decl',8,'p_function_decl','test.py',210),
  ('function_decl -> FUNC TYPE LPAREN param_list RPAREN block','function_decl',6,'p_function_decl','test.py',211),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','test.py',236),
  ('param_list -> param','param_list',1,'p_param_list','test.py',237),
  ('param_list -> empty','param_list',1,'p_param_list','test.py',238),
  ('param -> CONST TYPE IDENTIFIER','param',3,'p_param','test.py',247),
  ('param -> CONST TYPE AND IDENTIFIER','param',4,'p_param','test.py',248),
  ('param -> TYPE IDENTIFIER','param',2,'p_param','test.py',249),
  ('param -> TYPE AND IDENTIFIER','param',3,'p_param','test.py',250),
  ('var_decl -> TYPE IDENTIFIER ASSIGN expression','var_decl',4,'p_var_decl','test.py',262),
  ('var_decl -> TYPE IDENTIFIER','var_decl',2,'p_var_decl','test.py',263),
  ('var_decl -> modifier_list TYPE IDENTIFIER ASSIGN expression','var_decl',5,'p_var_decl','test.py',264),
  ('var_decl -> modifier_list TYPE IDENTIFIER','var_decl',3,'p_var_decl','test.py',265),
  ('modifier_list -> modifier_list modifier','modifier_list',2,'p_modifier_list','test.py',277),
  ('modifier_list -> modifier','modifier_list',1,'p_modifier_list','test.py',278),
  ('modifier -> CONST','modifier',1,'p_modifier','test.py',285),
  ('modifier -> STATIC','modifier',1,'p_modifier','test.py',286),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','test.py',287),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','test.py',288),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','test.py',289),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','test.py',300),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','test.py',301),
  ('if_stmt -> IF LPAREN expression RPAREN block elif_list else_clause','if_stmt',7,'p_if_stmt','test.py',308),
  ('if_stmt -> IF LPAREN expression RPAREN block elif_list','if_stmt',6,'p_if_stmt','test.py',309),
  ('if_stmt -> IF LPAREN expression RPAREN block else_clause','if_stmt',6,'p_if_stmt','test.py',310),
  ('if_stmt -> IF LPAREN expression RPAREN block','if_stmt',5,'p_if_stmt','test.py',311),
  ('elif_list -> elif_list elif_clause','elif_list',2,'p_elif_list','test.py',319),
  ('elif_list -> elif_clause','elif_list',1,'p_elif_list','test.py',320),
  ('elif_clause -> ELIF LPAREN expression RPAREN block','elif_clause',5,'p_elif_clause','test.py',327),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause','test.py',331),
  ('while_stmt -> WHILE LPAREN expression RPAREN block','while_stmt',5,'p_while_stmt','test.py',335),
  ('for_stmt -> FOR LPAREN IDENTIFIER IN expression RPAREN block','for_stmt',7,'p_for_stmt','test.py',339),
  ('break_stmt -> BREAK SEMICOLON','break_stmt',2,'p_break_stmt','test.py',343),
  ('continue_stmt -> CONTINUE SEMICOLON','continue_stmt',2,'p_continue_stmt','test.py',347),
  ('expr_stmt -> expression SEMICOLON','expr_stmt',2,'p_expr_stmt','test.py',351),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','test.py',355),
  ('cpp_block -> CPP_BLOCK','cpp_block',1,'p_cpp_block','test.py',359),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','test.py',364),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','test.py',365),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','test.py',366),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','test.py',367),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','test.py',368),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','test.py',369),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','test.py',370),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','test.py',371),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','test.py',372),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','test.py',373),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','test.py',374),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','test.py',375),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','test.py',376),
  ('expression -> expression LSHIFT expression','expression',3,'p_expression_binop','test.py',377),
  ('expression -> expression RSHIFT expression','expression',3,'p_expression_binop','test.py',378),
  ('expression -> NOT expression','expression',2,'p_expression_unary','test.py',382),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','test.py',383),
  ('expression -> expression QUESTION expression COLON expression','expression',5,'p_expression_ternary','test.py',387),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','test.py',391),
  ('expression -> IDENTIFIER LPAREN arg_list RPAREN','expression',4,'p_expression_call','test.py',395),
  ('expression -> TYPE LPAREN arg_list RPAREN','expression',4,'p_expression_call','test.py',396),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','test.py',402),
  ('arg_list -> expression','arg_list',1,'p_arg_list','test.py',403),
  ('arg_list -> empty','arg_list',1,'p_arg_list','test.py',404),
  ('expression -> NUMBER','expression',1,'p_expression_literal','test.py',413),
  ('expression -> STRING','expression',1,'p_expression_literal','test.py',414),
  ('expression -> RAW_STRING','expression',1,'p_expression_literal','test.py',415),
  ('expression -> INTERP_STRING','expression',1,'p_expression_literal','test.py',416),
  ('expression -> TRUE','expression',1,'p_expression_literal','test.py',417),
  ('expression -> FALSE','expression',1,'p_expression_literal','test.py',418),
  ('expression -> IDENTIFIER','expression',1,'p_expression_literal','test.py',419),
  ('expression -> LBRACE expr_list RBRACE','expression',3,'p_expression_collection','test.py',433),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','test.py',437),
  ('expr_list -> expression','expr_list',1,'p_expr_list','test.py',438),
  ('expr_list -> empty','expr_list',1,'p_expr_list','test.py',439),
  ('empty -> <empty>','empty',0,'p_empty','test.py',448),
]
